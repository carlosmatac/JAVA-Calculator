/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package caclculator;

import java.awt.Color;
import javax.swing.text.View;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 *
 * @author Carlos
 */
public class Screen extends javax.swing.JFrame {

    //boolean variable point is going to be used to set dots in case numbers need them 
    private boolean point = true;
    
    //we are going to save all the values the user enters in strings
    //whenever we have to do the operation we will change them to doubles
    private String content, val1, val2, sign;
    double result;
    
    //the next three boolean variables will store in which mode we are operating: decimal, hexadecimal or binary
    static private boolean decimal = true;
    static private boolean   binary = false;
    static private boolean hexadecimal = false;
    
    //In this string we are going to be saving the operations we make 
    //Whenever "=" is pressed this string will be shown in an auxiliary label
    //in op everything is saved but it is shown the second string
    static private String op = "";
    static private String op_shown = "";
    
    
    // we are going to use this variable to link several operations 
    String pre = "0.0";
    
    /**
     * Creates new form Screen
     */
    public Screen() {
        initComponents();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        seven = new javax.swing.JButton();
        four = new javax.swing.JButton();
        one = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        five = new javax.swing.JButton();
        two = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        six = new javax.swing.JButton();
        three = new javax.swing.JButton();
        ci = new javax.swing.JButton();
        ce = new javax.swing.JButton();
        del = new javax.swing.JButton();
        div = new javax.swing.JButton();
        mul = new javax.swing.JButton();
        less = new javax.swing.JButton();
        plus = new javax.swing.JButton();
        equals = new javax.swing.JButton();
        mod = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        coma = new javax.swing.JButton();
        A = new javax.swing.JButton();
        B = new javax.swing.JButton();
        C = new javax.swing.JButton();
        D = new javax.swing.JButton();
        E = new javax.swing.JButton();
        F = new javax.swing.JButton();
        hex = new javax.swing.JButton();
        dec = new javax.swing.JButton();
        bin = new javax.swing.JButton();
        sin = new javax.swing.JButton();
        cos = new javax.swing.JButton();
        log = new javax.swing.JButton();
        exp = new javax.swing.JButton();
        options = new javax.swing.JButton();
        result_display = new javax.swing.JLabel();
        ans = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        memory = new javax.swing.JLabel();
        final_operation = new javax.swing.JLabel();
        text = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(204, 255, 204));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        seven.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        seven.setText("7");
        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenActionPerformed(evt);
            }
        });
        getContentPane().add(seven, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, 60, -1));

        four.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        four.setText("4");
        four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourActionPerformed(evt);
            }
        });
        getContentPane().add(four, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 60, -1));

        one.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        one.setText("1");
        one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneActionPerformed(evt);
            }
        });
        getContentPane().add(one, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, 60, -1));

        eight.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        eight.setText("8");
        eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightActionPerformed(evt);
            }
        });
        getContentPane().add(eight, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, 60, -1));

        five.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        five.setText("5");
        five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveActionPerformed(evt);
            }
        });
        getContentPane().add(five, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, 60, -1));

        two.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        two.setText("2");
        two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoActionPerformed(evt);
            }
        });
        getContentPane().add(two, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, 60, -1));

        nine.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        nine.setText("9");
        nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineActionPerformed(evt);
            }
        });
        getContentPane().add(nine, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, 60, -1));

        six.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        six.setText("6");
        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixActionPerformed(evt);
            }
        });
        getContentPane().add(six, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, 60, -1));

        three.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        three.setText("3");
        three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeActionPerformed(evt);
            }
        });
        getContentPane().add(three, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 190, 60, -1));

        ci.setText("CI");
        ci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ciActionPerformed(evt);
            }
        });
        getContentPane().add(ci, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 60, -1));

        ce.setText("CE");
        ce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ceActionPerformed(evt);
            }
        });
        getContentPane().add(ce, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 60, -1));

        del.setText("DEL");
        del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delActionPerformed(evt);
            }
        });
        getContentPane().add(del, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, 60, -1));

        div.setText("/");
        div.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divActionPerformed(evt);
            }
        });
        getContentPane().add(div, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 100, 60, -1));

        mul.setText("x");
        mul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mulActionPerformed(evt);
            }
        });
        getContentPane().add(mul, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 130, 60, -1));

        less.setText("-");
        less.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lessActionPerformed(evt);
            }
        });
        getContentPane().add(less, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 160, 60, -1));

        plus.setText("+");
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusActionPerformed(evt);
            }
        });
        getContentPane().add(plus, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 190, 60, -1));

        equals.setBackground(new java.awt.Color(128, 238, 132));
        equals.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        equals.setText("=");
        equals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsActionPerformed(evt);
            }
        });
        getContentPane().add(equals, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 220, 60, -1));

        mod.setText("%");
        mod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modActionPerformed(evt);
            }
        });
        getContentPane().add(mod, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 220, 60, -1));

        zero.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        zero.setText("0");
        zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroActionPerformed(evt);
            }
        });
        getContentPane().add(zero, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, 60, -1));

        coma.setText(".");
        coma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comaActionPerformed(evt);
            }
        });
        getContentPane().add(coma, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 220, 60, -1));

        A.setText("A");
        A.setEnabled(false);
        A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AActionPerformed(evt);
            }
        });
        getContentPane().add(A, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 50, -1));

        B.setText("B");
        B.setEnabled(false);
        B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActionPerformed(evt);
            }
        });
        getContentPane().add(B, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 50, -1));

        C.setText("C");
        C.setEnabled(false);
        C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CActionPerformed(evt);
            }
        });
        getContentPane().add(C, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 50, -1));

        D.setText("D");
        D.setEnabled(false);
        D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DActionPerformed(evt);
            }
        });
        getContentPane().add(D, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 50, -1));

        E.setText("E");
        E.setEnabled(false);
        E.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EActionPerformed(evt);
            }
        });
        getContentPane().add(E, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 50, -1));

        F.setText("F");
        F.setEnabled(false);
        F.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FActionPerformed(evt);
            }
        });
        getContentPane().add(F, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 50, -1));

        hex.setBackground(new java.awt.Color(204, 204, 204));
        hex.setText("Hex");
        hex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hexActionPerformed(evt);
            }
        });
        getContentPane().add(hex, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 250, 60, -1));

        dec.setBackground(new java.awt.Color(153, 153, 153));
        dec.setText("Dec");
        dec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decActionPerformed(evt);
            }
        });
        getContentPane().add(dec, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 250, 60, -1));

        bin.setBackground(new java.awt.Color(204, 204, 204));
        bin.setText("Bin");
        bin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binActionPerformed(evt);
            }
        });
        getContentPane().add(bin, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 250, 60, -1));

        sin.setText("sin");
        sin.setVisible(false);
        sin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinActionPerformed(evt);
            }
        });
        getContentPane().add(sin, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 100, 70, -1));

        cos.setText("cos");
        cos.setVisible(false);
        cos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cosActionPerformed(evt);
            }
        });
        getContentPane().add(cos, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 130, 70, -1));

        log.setText("log");
        log.setVisible(false);
        log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logActionPerformed(evt);
            }
        });
        getContentPane().add(log, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 160, 70, -1));

        exp.setText("exp");
        exp.setVisible(false);
        exp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expActionPerformed(evt);
            }
        });
        getContentPane().add(exp, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 190, 70, -1));

        options.setText("Show More");
        options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsActionPerformed(evt);
            }
        });
        getContentPane().add(options, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 250, 140, -1));

        result_display.setBackground(new java.awt.Color(204, 255, 255));
        result_display.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        result_display.setBorder(null);
        result_display.setOpaque(true);
        getContentPane().add(result_display, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 180, 30));

        ans.setText("ANS");
        ans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ansActionPerformed(evt);
            }
        });
        getContentPane().add(ans, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 220, 70, -1));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 340, 10, 0));

        memory.setBackground(new java.awt.Color(204, 255, 255));
        memory.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        memory.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        memory.setOpaque(true);
        getContentPane().add(memory, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 50));

        final_operation.setBackground(new java.awt.Color(204, 255, 255));
        final_operation.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        final_operation.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        final_operation.setOpaque(true);
        getContentPane().add(final_operation, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 220, 30));

        text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textActionPerformed(evt);
            }
        });
        text.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textKeyTyped(evt);
            }
        });
        getContentPane().add(text, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 460, 290, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //we will use this to know if we have to show or hide advanced options
    int options_counter = 0;
    
    
    
    
    
    
    private void sixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "6");
        op = op + "6";
        memory.setText(op);
    }//GEN-LAST:event_sixActionPerformed

    private void equalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsActionPerformed
        // TODO add your handling code here:
        
        String total_result;
        val2 = text.getText();
        
        
        
        if(!val2.equals("")){
            
            
            total_result = operations(val1, val2, sign);
            result_display.setText(total_result);
            text.setText("");
            
            op_shown = op;
            op = "";
            final_operation.setText(op_shown);
            memory.setText("");
            
            pre = total_result;
            
            //System.out.println(pre);
        }
    }//GEN-LAST:event_equalsActionPerformed

    private void decActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decActionPerformed
        // TODO add your handling code here:
        two.setEnabled(true);
        three.setEnabled(true);
        four.setEnabled(true);
        five.setEnabled(true);
        six.setEnabled(true);
        seven.setEnabled(true);
        eight.setEnabled(true);
        nine.setEnabled(true);
        A.setEnabled(false);
        B.setEnabled(false);
        C.setEnabled(false);
        D.setEnabled(false);
        E.setEnabled(false);
        F.setEnabled(false);
        
        decimal = true;
        hexadecimal = false;
        binary = false;
        
        sin.setEnabled(true);
        log.setEnabled(true);
        cos.setEnabled(true);
        exp.setEnabled(true);
        
        dec.setBackground(new Color(153, 153, 153));
        hex.setBackground(new Color(204, 204, 204));
        bin.setBackground(new Color(204, 204, 204));
        
        
    }//GEN-LAST:event_decActionPerformed

    private void binActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binActionPerformed
        // TODO add your handling code here:
        two.setEnabled(false);
        three.setEnabled(false);
        four.setEnabled(false);
        five.setEnabled(false);
        six.setEnabled(false);
        seven.setEnabled(false);
        eight.setEnabled(false);
        nine.setEnabled(false);
        A.setEnabled(false);
        B.setEnabled(false);
        C.setEnabled(false);
        D.setEnabled(false);
        E.setEnabled(false);
        F.setEnabled(false);
        
        decimal = false;
        hexadecimal = false;
        binary = true;
        
        sin.setEnabled(false);
        log.setEnabled(false);
        cos.setEnabled(false);
        exp.setEnabled(false);
        
        bin.setBackground(new Color(153, 153, 153));
        dec.setBackground(new Color(204, 204, 204));
        hex.setBackground(new Color(204, 204, 204));
        
    }//GEN-LAST:event_binActionPerformed

    
    private void optionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsActionPerformed
        
        
        //we are going to use the counter to know when we have to hide the extra options 
        //and when do we have to show them 
        
        options_counter++;
        if (options_counter % 2 == 0){
            
            options.setText("Show Options");
            sin.setVisible(false);
            cos.setVisible(false);
            exp.setVisible(false);
            log.setVisible(false);
            
        }
        
        else if (options_counter % 2 != 0){
            options.setText("Hide Options");
            sin.setVisible(true);
            cos.setVisible(true);
            exp.setVisible(true);
            log.setVisible(true);
        }
        
    }//GEN-LAST:event_optionsActionPerformed

    private void ciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ciActionPerformed
        // TODO add your handling code here:
        text.setText("");
        op = "";
    }//GEN-LAST:event_ciActionPerformed

    private void AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AActionPerformed
        // TODO add your handling code here:
        
        text.setText(text.getText() + "A");
        op = op +"A";
        memory.setText(op);
        
    }//GEN-LAST:event_AActionPerformed

    private void BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "B");
        op = op + "B";
        memory.setText(op);
    }//GEN-LAST:event_BActionPerformed

    private void CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "C");
        op = op + "C";
        memory.setText(op);
    }//GEN-LAST:event_CActionPerformed

    private void DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "D");
        op = op + "D";
        memory.setText(op);
    }//GEN-LAST:event_DActionPerformed

    private void EActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "E");
        op = op + "E";
        memory.setText(op);
    }//GEN-LAST:event_EActionPerformed

    private void FActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "F");
        op = op + "F";
        memory.setText(op);
    }//GEN-LAST:event_FActionPerformed

    private void ceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ceActionPerformed
        // TODO add your handling code here:
        
        text.setText("");
        pre = "0.0";
        result_display.setText("");
       
        op = "";
        memory.setText("");
        final_operation.setText("");
    }//GEN-LAST:event_ceActionPerformed

    private void delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delActionPerformed
        // TODO add your handling code here:
        
        content = text.getText();
        
        if (content.length() > 0){
            
            content = content.substring(0, content.length() - 1);
            text.setText(content);
            op = op.substring(0, op.length() - 1);
            memory.setText(op);
        }
    }//GEN-LAST:event_delActionPerformed

    private void divActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divActionPerformed
        // TODO add your handling code here:
        
        if (!text.getText().equals("")){
            val1 = text.getText();
            
        }
        else val1 = pre;
          
        sign = "/";
        op = op + "/";
        memory.setText(op);
        text.setText("");
        
        
    }//GEN-LAST:event_divActionPerformed

    private void mulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mulActionPerformed
        // TODO add your handling code here:
        
        if (!text.getText().equals("")){
            val1 = text.getText();
            
        }
        else val1 = pre;
        
        sign = "x";
        op = op + "x";
        memory.setText(op);
        text.setText("");
        
    }//GEN-LAST:event_mulActionPerformed

    private void lessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lessActionPerformed
        // TODO add your handling code here:
        
        if (!text.getText().equals("")){
            val1 = text.getText();
            
        }
        else val1 = pre;
        
        sign = "-";
        op = op + "-";
        memory.setText(op);
        text.setText("");
        
    }//GEN-LAST:event_lessActionPerformed

    private void plusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusActionPerformed
        // TODO add your handling code here:
        
        //All sign actions will work exactly the same
        //if there is already a number we can save into one of the values 
        if (!text.getText().equals("")){
            val1 = text.getText();
            
        }
        else val1 = pre;
        
        sign = "+";
        op = op + "+";
        memory.setText(op);
        text.setText("");
        
    }//GEN-LAST:event_plusActionPerformed

    private void hexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hexActionPerformed
        // TODO add your handling code here:
        
        two.setEnabled(true);
        three.setEnabled(true);
        four.setEnabled(true);
        five.setEnabled(true);
        six.setEnabled(true);
        seven.setEnabled(true);
        eight.setEnabled(true);
        nine.setEnabled(true);
        A.setEnabled(true);
        B.setEnabled(true);
        C.setEnabled(true);
        D.setEnabled(true);
        E.setEnabled(true);
        F.setEnabled(true);

        
        decimal = false;
        hexadecimal = true;
        binary = false;
        
        sin.setEnabled(false);
        log.setEnabled(false);
        cos.setEnabled(false);
        exp.setEnabled(false);
        
        hex.setBackground(new Color(153, 153, 153));
        dec.setBackground(new Color(204, 204, 204));
        bin.setBackground(new Color(204, 204, 204));
    }//GEN-LAST:event_hexActionPerformed

    private void comaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comaActionPerformed
        // TODO add your handling code here:
        content = text.getText();
        
        if (content.length() <=  0){
            text.setText("0.");
            op = "0.";
        }
        //in case there is already a point we should not write it again. 
        //This conditional statement will let us do nothing in case the user press point
        else if (text.getText().contains(".")){}
        else {
            text.setText(text.getText() + ".");
            op = op + ".";
            memory.setText(op);
            point = false;
        }
    }//GEN-LAST:event_comaActionPerformed

    private void modActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modActionPerformed
        // TODO add your handling code here:
        
        if (!text.getText().equals("")){
            val1 = text.getText();
           
        }
        else val1 = pre;
        
        sign = "%";
        op = op + "%";
        memory.setText(op);
        text.setText("");
        
    }//GEN-LAST:event_modActionPerformed

    private void sinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinActionPerformed
        // TODO add your handling code here:
        
        sign = "sin";
        
        op = op + "sin";
        memory.setText(op);
        
    }//GEN-LAST:event_sinActionPerformed

    private void cosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cosActionPerformed
        // TODO add your handling code here:
        
        sign = "cos";
        
        op = op + "cos";
        memory.setText(op);
    }//GEN-LAST:event_cosActionPerformed

    private void logActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logActionPerformed
        // TODO add your handling code here:
        
        sign = "log";

        op = op + "log";
        memory.setText(op);
    }//GEN-LAST:event_logActionPerformed

    private void expActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expActionPerformed
        // TODO add your handling code here:
        
        if (!text.getText().equals("")){
            val1 = text.getText();
            
        }
        else val1 = pre;
        
        sign = "exp";
        op = op + "exp";
        memory.setText(op);
        text.setText("");
        
        
        
    }//GEN-LAST:event_expActionPerformed

    private void zeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "0");
        op = op + "0";
        memory.setText(op);
    }//GEN-LAST:event_zeroActionPerformed

    private void oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "1");
        op = op + "1";
        memory.setText(op);
        
    }//GEN-LAST:event_oneActionPerformed

    private void twoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "2");
        op = op + "2";
        memory.setText(op);
    }//GEN-LAST:event_twoActionPerformed

    private void threeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "3");
        op = op + "3";
        memory.setText(op);
    }//GEN-LAST:event_threeActionPerformed

    private void fourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "4");
        op = op + "4";
        memory.setText(op);
    }//GEN-LAST:event_fourActionPerformed

    private void fiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "5");
        op = op + "5";
        memory.setText(op);
    }//GEN-LAST:event_fiveActionPerformed

    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "7");
        op = op + "7";
        memory.setText(op);
    }//GEN-LAST:event_sevenActionPerformed

    private void eightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "8");
        op = op + "8";
        memory.setText(op);
    }//GEN-LAST:event_eightActionPerformed

    private void nineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineActionPerformed
        // TODO add your handling code here:
        text.setText(text.getText() + "9");
        op = op + "9";
        memory.setText(op);
    }//GEN-LAST:event_nineActionPerformed

    private void ansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ansActionPerformed
        // TODO add your handling code here:
        text.setText(pre);
        op = (String) pre;
        memory.setText(op);
    }//GEN-LAST:event_ansActionPerformed

    private void textKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textKeyTyped
        
        
        
    }//GEN-LAST:event_textKeyTyped

    private void textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textActionPerformed

    
    //I DONT KNOW WHY THIS DOESNT WORK 
    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
       
        //we first have to get the number. We can only do it with one char at once

        String c = String.valueOf(evt.getKeyChar());

        //now we have to see all the posibilities that we have (numbers and simple operators)

        //NUMBERS
        if (c.equals("0")){
            text.setText(text.getText() + "0");
            op = op + "0";
            memory.setText(op);
        }
        if ("1".equals(c)){
            text.setText(text.getText() + "1");
            op = op + "1";
            memory.setText(op);
        }
        if ("2".equals(c)){
            text.setText(text.getText() + "2");
            op = op + "2";
            memory.setText(op);
        }
        if ("3".equals(c)){
            text.setText(text.getText() + "3");
            op = op + "3";
            memory.setText(op);
        }
        if ("4".equals(c)){
            text.setText(text.getText() + "4");
            op = op + "4";
            memory.setText(op);
        }
        if ("5".equals(c)){
            text.setText(text.getText() + "5");
            op = op + "5";
            memory.setText(op);
        }
        if ("6".equals(c)){
            text.setText(text.getText() + "6");
            op = op + "6";
            memory.setText(op);
        }
        if ("7".equals(c)){
            text.setText(text.getText() + "7");
            op = op + "7";
            memory.setText(op);
        }
        if ("8".equals(c)){
            text.setText(text.getText() + "8");
            op = op + "8";
            memory.setText(op);
        }
        if ("9".equals(c)){
            text.setText(text.getText() + "9");
            op = op + "9";
            memory.setText(op);
        }

        //SIMPLE OPERATORS
        if ("+".equals(c)){

            if (!text.getText().equals("")){
                val1 = text.getText();
            }
            else val1 = pre;

            sign = "+";
            op = op + "+";
            memory.setText(op);
            text.setText("");

        }

        if ("-".equals(c)){

            if (!text.getText().equals("")){
                val1 = text.getText();

            }
            else val1 = pre;

            sign = "-";
            op = op + "-";
            memory.setText(op);
            text.setText("");

        }

        if ("x".equals(c)){

            if (!text.getText().equals("")){
                val1 = text.getText();

            }
            else val1 = pre;

            sign = "x";
            op = op + "x";
            memory.setText(op);
            text.setText("");

        }

        if ("/".equals(c)){

            if (!text.getText().equals("")){
                val1 = text.getText();

            }
            else val1 = pre;

            sign = "/";
            op = op + "/";
            memory.setText(op);
            text.setText("");

        }

        if ("%".equals(c)){

            if (!text.getText().equals("")){
                val1 = text.getText();

            }
            else val1 = pre;

            sign = "%";
            op = op + "%";
            memory.setText(op);
            text.setText("");

        }

        //COMA

        if (".".equals(c)){

            content = text.getText();

            if (content.length() <=  0){
                text.setText("0.");
                op = "0.";
            }
            //in case there is already a point we should not write it again.
            //This conditional statement will let us do nothing in case the user press point
            else if (text.getText().contains(".")){}
            else {
                text.setText(text.getText() + ".");
                op = op + ".";
                memory.setText(op);
                point = false;
            }

        }   
        
    }//GEN-LAST:event_formKeyTyped

    
    
    

    
    
    public static String operations (String v1, String v2, String sign){
        Double result_aux=0.0;
        int result_int = 0;
        String ret ="";
        
        if (sign.equals("+")){
            //with paresedouble we can convert string to double number
            if (decimal){
                result_aux = Double.parseDouble(v1) + Double.parseDouble(v2);
                ret = result_aux.toString();
            }
            else if (binary){
                result_int = Integer.parseInt(v1, 2) + Integer.parseInt(v2, 2);
                ret = Integer.toBinaryString(result_int);
            }
            
            else if (hexadecimal){
                result_int = Integer.parseInt(v1, 16) + Integer.parseInt(v2, 16);
                ret = Integer.toHexString(result_int);
            }
            
        }
        
        else if (sign.equals("-")){
            //with paresedouble we can convert string to double number
            
            if (decimal){
                result_aux = Double.parseDouble(v1) - Double.parseDouble(v2);
                ret = result_aux.toString();
            }
            else if (binary){
                result_int = Integer.parseInt(v1, 2) - Integer.parseInt(v2, 2);
                ret = Integer.toBinaryString(result_int);
            }
            
            else if (hexadecimal){
                result_int = Integer.parseInt(v1, 16) - Integer.parseInt(v2, 16);
                ret = Integer.toHexString(result_int);
            }
        }
        
        else if (sign.equals("x")){
            //with paresedouble we can convert string to double number
            if (decimal){
                result_aux = Double.parseDouble(v1) * Double.parseDouble(v2);
                ret = result_aux.toString();
            }
            else if (binary){
                result_int = Integer.parseInt(v1, 2) * Integer.parseInt(v2, 2);
                ret = Integer.toBinaryString(result_int);
            }
            
            else if (hexadecimal){
                result_int = Integer.parseInt(v1, 16) * Integer.parseInt(v2, 16);
                ret = Integer.toHexString(result_int);
            }
        }
        
        else if (sign.equals("/")){
            //with paresedouble we can convert string to double number
            if (decimal){
                result_aux = Double.parseDouble(v1) / Double.parseDouble(v2);
                ret = result_aux.toString();
            }
            else if (binary){
                result_int = Integer.parseInt(v1, 2) / Integer.parseInt(v2, 2);
                ret = Integer.toBinaryString(result_int);
            }
            
            else if (hexadecimal){
                result_int = Integer.parseInt(v1, 16) / Integer.parseInt(v2, 16);
                ret = Integer.toHexString(result_int);
            }
        }
        
        else if (sign.equals("%")){
            //with paresedouble we can convert string to double number
            if (decimal){
                result_aux = Double.parseDouble(v1) % Double.parseDouble(v2);
                ret = result_aux.toString();
            }
            else if (binary){
                result_int = Integer.parseInt(v1, 2) % Integer.parseInt(v2, 2);
                ret = Integer.toBinaryString(result_int);
            }
            
            else if (hexadecimal){
                result_int = Integer.parseInt(v1, 16) % Integer.parseInt(v2, 16);
                ret = Integer.toHexString(result_int);
            }
        }
        
        else if (sign.equals("exp")){
            //with paresedouble we can convert string to double number
            result_aux = Math.pow(Double.parseDouble(v1), Double.parseDouble(v2));
            ret = result_aux.toString();
            
                      
            
        }
        
        else if (sign.equals("log")){
            //with paresedouble we can convert string to double number
            //we use this division to make the logarith in base 2
            result_aux = Math.log(Double.parseDouble(v2)) / Math.log(2.0);
            ret = result_aux.toString();
        }
        
        else if (sign.equals("sin")){
            //with paresedouble we can convert string to double number
            result_aux = Math.sin(Double.parseDouble(v2));
            ret = result_aux.toString();
            
           
        }
        
        else if (sign.equals("cos")){
            //with paresedouble we can convert string to double number
            result_aux = Math.cos(Double.parseDouble(v2));
            ret = result_aux.toString();
        }
        

        
        
        
        return ret;
          
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Screen().setVisible(true);
            }
        });
        

        
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton A;
    private javax.swing.JButton B;
    private javax.swing.JButton C;
    private javax.swing.JButton D;
    private javax.swing.JButton E;
    private javax.swing.JButton F;
    private javax.swing.JButton ans;
    private javax.swing.JButton bin;
    private javax.swing.JButton ce;
    private javax.swing.JButton ci;
    private javax.swing.JButton coma;
    private javax.swing.JButton cos;
    private javax.swing.JButton dec;
    private javax.swing.JButton del;
    private javax.swing.JButton div;
    private javax.swing.JButton eight;
    private javax.swing.JButton equals;
    private javax.swing.JButton exp;
    private javax.swing.JLabel final_operation;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JButton hex;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton less;
    private javax.swing.JButton log;
    private javax.swing.JLabel memory;
    private javax.swing.JButton mod;
    private javax.swing.JButton mul;
    private javax.swing.JButton nine;
    private javax.swing.JButton one;
    private javax.swing.JButton options;
    private javax.swing.JButton plus;
    private javax.swing.JLabel result_display;
    private javax.swing.JButton seven;
    private javax.swing.JButton sin;
    private javax.swing.JButton six;
    private javax.swing.JTextField text;
    private javax.swing.JButton three;
    private javax.swing.JButton two;
    private javax.swing.JButton zero;
    // End of variables declaration//GEN-END:variables

   
}
